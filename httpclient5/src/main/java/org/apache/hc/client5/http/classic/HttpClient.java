package org.apache.hc.client5.http.classic;

import org.apache.hc.core5.http.ClassicHttpRequest;
import org.apache.hc.core5.http.ClassicHttpResponse;
import org.apache.hc.core5.http.HttpHost;
import org.apache.hc.core5.http.HttpResponse;
import org.apache.hc.core5.http.io.HttpClientResponseHandler;
import org.apache.hc.core5.http.protocol.HttpContext;

import java.io.IOException;

/**
 * This interface represents only the most basic contract for HTTP request
 * execution. It imposes no restrictions or particular details on the request
 * execution process and leaves the specifics of state management,
 * authentication and redirect handling up to individual implementations.
 * <p>
 * <p>
 * Http、tcp/ip、socket区别
 * <p>
 * Tcp/ip是传输层协议，而http则是建立在它之上的上层应用协议。
 * Http聚焦在数据规范层面，tcp/ip则主要解决数据传输层面。建立在tcp/ip上的应用协议很多，像rpc，ftp等。
 * Socket则是tcp/ip的一个编程实现，封装了传输层的众多细节，从而让协议层可以关注协议本身的处理而不用关注底层传输。
 * 在程序里http请求（连接）最终一定需要绑定到一个具体的socket连接进行上行和下行传输。
 *
 * @since 4.0
 */
public interface HttpClient {

    /**
     * Executes HTTP request using the default context.
     *
     * @param request the request to execute
     * @return the response to the request. This is always a final response,
     * never an intermediate response with an 1xx status code.
     * Whether redirects or authentication challenges will be returned
     * or handled automatically depends on the implementation and
     * configuration of this client.
     * @throws IOException in case of a problem or the connection was aborted
     */
    HttpResponse execute(ClassicHttpRequest request) throws IOException;

    /**
     * Executes HTTP request using the given context.
     *
     * @param request the request to execute
     * @param context the context to use for the execution, or
     *                {@code null} to use the default context
     * @return the response to the request. This is always a final response,
     * never an intermediate response with an 1xx status code.
     * Whether redirects or authentication challenges will be returned
     * or handled automatically depends on the implementation and
     * configuration of this client.
     * @throws IOException in case of a problem or the connection was aborted
     */
    HttpResponse execute(ClassicHttpRequest request, HttpContext context) throws IOException;

    /**
     * Executes HTTP request using the default context.
     *
     * @param target  the target host for the request.
     *                Implementations may accept {@code null}
     *                if they can still determine a route, for example
     *                to a default target or by inspecting the request.
     * @param request the request to execute
     * @return the response to the request. This is always a final response,
     * never an intermediate response with an 1xx status code.
     * Whether redirects or authentication challenges will be returned
     * or handled automatically depends on the implementation and
     * configuration of this client.
     * @throws IOException in case of a problem or the connection was aborted
     */
    ClassicHttpResponse execute(HttpHost target, ClassicHttpRequest request) throws IOException;

    /**
     * Executes HTTP request using the given context.
     *
     * @param target  the target host for the request.
     *                Implementations may accept {@code null}
     *                if they can still determine a route, for example
     *                to a default target or by inspecting the request.
     * @param request the request to execute
     * @param context the context to use for the execution, or
     *                {@code null} to use the default context
     * @return the response to the request. This is always a final response,
     * never an intermediate response with an 1xx status code.
     * Whether redirects or authentication challenges will be returned
     * or handled automatically depends on the implementation and
     * configuration of this client.
     * @throws IOException in case of a problem or the connection was aborted
     */
    HttpResponse execute(HttpHost target, ClassicHttpRequest request, HttpContext context) throws IOException;

    /**
     * Executes HTTP request using the default context and processes the
     * response using the given response handler.
     * <p>
     * Implementing classes are required to ensure that the content entity
     * associated with the response is fully consumed and the underlying
     * connection is released back to the connection manager automatically
     * in all cases relieving individual {@link HttpClientResponseHandler}s from
     * having to manage resource deallocation internally.
     * </p>
     *
     * @param request         the request to execute
     * @param responseHandler the response handler
     * @return the response object as generated by the response handler.
     * @throws IOException in case of a problem or the connection was aborted
     */
    <T> T execute(ClassicHttpRequest request, HttpClientResponseHandler<? extends T> responseHandler) throws IOException;

    /**
     * Executes HTTP request using the given context and processes the
     * response using the given response handler.
     * <p>
     * Implementing classes are required to ensure that the content entity
     * associated with the response is fully consumed and the underlying
     * connection is released back to the connection manager automatically
     * in all cases relieving individual {@link HttpClientResponseHandler}s from
     * having to manage resource deallocation internally.
     * </p>
     *
     * @param request         the request to execute
     * @param context         the context to use for the execution, or
     *                        {@code null} to use the default context
     * @param responseHandler the response handler
     * @return the response object as generated by the response handler.
     * @throws IOException in case of a problem or the connection was aborted
     */
    <T> T execute(
            ClassicHttpRequest request,
            HttpContext context,
            HttpClientResponseHandler<? extends T> responseHandler) throws IOException;

    /**
     * Executes HTTP request to the target using the default context and
     * processes the response using the given response handler.
     * <p>
     * Implementing classes are required to ensure that the content entity
     * associated with the response is fully consumed and the underlying
     * connection is released back to the connection manager automatically
     * in all cases relieving individual {@link HttpClientResponseHandler}s from
     * having to manage resource deallocation internally.
     * </p>
     *
     * @param target          the target host for the request.
     *                        Implementations may accept {@code null}
     *                        if they can still determine a route, for example
     *                        to a default target or by inspecting the request.
     * @param request         the request to execute
     * @param responseHandler the response handler
     * @return the response object as generated by the response handler.
     * @throws IOException in case of a problem or the connection was aborted
     */
    <T> T execute(
            HttpHost target,
            ClassicHttpRequest request,
            HttpClientResponseHandler<? extends T> responseHandler) throws IOException;

    /**
     * Executes HTTP request to the target using the given context and
     * processes the response using the given response handler.
     * <p>
     * Implementing classes are required to ensure that the content entity
     * associated with the response is fully consumed and the underlying
     * connection is released back to the connection manager automatically
     * in all cases relieving individual {@link HttpClientResponseHandler}s from
     * having to manage resource deallocation internally.
     * </p>
     *
     * @param target          the target host for the request.
     *                        Implementations may accept {@code null}
     *                        if they can still determine a route, for example
     *                        to a default target or by inspecting the request.
     * @param request         the request to execute
     * @param context         the context to use for the execution, or
     *                        {@code null} to use the default context
     * @param responseHandler the response handler
     * @return the response object as generated by the response handler.
     * @throws IOException in case of a problem or the connection was aborted
     */
    <T> T execute(
            HttpHost target,
            ClassicHttpRequest request,
            HttpContext context,
            HttpClientResponseHandler<? extends T> responseHandler) throws IOException;

}
